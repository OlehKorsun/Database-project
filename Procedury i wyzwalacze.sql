-- PROCEDURA #1
ALTER PROCEDURE PROCED_PRZELEW
    @Z_KONTO_FROM INT,
    @Z_KONTO_TO INT,
    @Z_SUMA DECIMAL(18, 2)
AS
BEGIN
    DECLARE @Z_BALANS DECIMAL(18, 2);
    DECLARE @Z_TMP INT;
    DECLARE @Z_STATUS_ID INT;
    
  
    IF @Z_SUMA <= 0
    BEGIN
        Raiserror('SUMA NIE MOŻE BYĆ MNIEJSZA LUB RÓWNA ZERO!', 11, 1);
    END

    SELECT @Z_TMP = COUNT(1)
    FROM KONTO
    WHERE ID = @Z_KONTO_FROM OR ID = @Z_KONTO_TO;
        
    IF @Z_TMP < 2
    BEGIN
        Raiserror('NIE ZNALEZIONO KONTA ŹRÓDŁOWEGO LUB DOCELOWEGO!', 11, 1);
    END

    SELECT @Z_BALANS = BALANS FROM KONTO WHERE ID = @Z_KONTO_FROM;
        
    IF @Z_BALANS < @Z_SUMA
    BEGIN
        Raiserror('ZA MAŁO ŚRODKÓW NA KONCIE!', 11, 1);

		SELECT @Z_TMP = ISNULL(MAX(ID), 0) + 1 FROM PRZELEW;
        SELECT @Z_STATUS_ID = ID FROM STATUS_OPERACJI WHERE NAZWA = 'ODMOWA';
        INSERT INTO PRZELEW (ID, KONTOSKAD_ID, KONTODOKAD_ID, KWOTA, CZAS, STATUS_OPERACJI_ID) 
		VALUES (@Z_TMP, @Z_KONTO_FROM, @Z_KONTO_TO, @Z_SUMA, CURRENT_TIMESTAMP, @Z_STATUS_ID);
    END
    ELSE
    BEGIN
        UPDATE KONTO SET BALANS = BALANS - @Z_SUMA WHERE ID = @Z_KONTO_FROM;
        UPDATE KONTO SET BALANS = BALANS + @Z_SUMA WHERE ID = @Z_KONTO_TO;
            
        SELECT @Z_TMP = ISNULL(MAX(ID), 0) + 1 FROM PRZELEW;
        SELECT @Z_STATUS_ID = ID FROM STATUS_OPERACJI WHERE NAZWA = 'ZAKONCZONA';
            
        INSERT INTO PRZELEW (ID, KONTOSKAD_ID, KONTODOKAD_ID, KWOTA, CZAS, STATUS_OPERACJI_ID)
        VALUES (@Z_TMP, @Z_KONTO_FROM, @Z_KONTO_TO, @Z_SUMA, CURRENT_TIMESTAMP, @Z_STATUS_ID);
    END;
END;


-- PROCEDURA #2
GO
ALTER PROCEDURE CREATE_NEW_OSOBA
    @Z_IMIE VARCHAR(255),
    @Z_NAZWISKO VARCHAR(255),
    @Z_NR_DOK VARCHAR(255),
    @Z_NR_TEL VARCHAR(50),
    @Z_EMAIL VARCHAR(255),
    @Z_KRAJ_KORESP VARCHAR(255),
    @Z_MIASTO_KORESP VARCHAR(255),
    @Z_ULICA_KORESP VARCHAR(255),
    @Z_NRDOMU_KORESP INT,
    @Z_KRAJ_ZAMIESZ VARCHAR(255),
    @Z_MIASTO_ZAMIESZ VARCHAR(255),
    @Z_ULICA_ZAMIESZ VARCHAR(255),
    @Z_NRDOMU_ZAMIESZ INT,
    @Z_WALUTA VARCHAR(50),
    @Z_NAZWA_RACHUNKU VARCHAR(255),
    @Z_TYPKONTA VARCHAR(50)
AS
BEGIN
    DECLARE @Z_NEW_ID INT;
    DECLARE @Z_ADRESS_KORESP_ID INT;
    DECLARE @Z_ADRESS_ZAMIESZ_ID INT;
    DECLARE @Z_TMP INT;
    DECLARE @Z_NEW_NRKONTA VARCHAR(26);
    DECLARE @Z_WALUTA_ID INT;
    DECLARE @Z_NEW_IBAN VARCHAR(28);
    DECLARE @Z_TYPKONTA_ID INT;

    -- NOWY ID DLA OSOBY
    SELECT @Z_NEW_ID = ISNULL(MAX(ID), 0) + 1 FROM WLASCICIEL_KONTA;

    -- NOWY ADRES KORESPONDENCJI
    SELECT @Z_TMP = COUNT(1) FROM KRAJ WHERE NAZWA = @Z_KRAJ_KORESP;
    IF @Z_TMP < 1
    BEGIN
        SELECT @Z_ADRESS_KORESP_ID = ISNULL(MAX(ID), 0) + 1 FROM KRAJ;
        INSERT INTO KRAJ(ID, NAZWA) VALUES (@Z_ADRESS_KORESP_ID, @Z_KRAJ_KORESP);
    END
    ELSE
    BEGIN
        SELECT @Z_ADRESS_KORESP_ID = ID FROM KRAJ WHERE NAZWA = @Z_KRAJ_KORESP;
    END

    SELECT @Z_TMP = COUNT(1) FROM MIASTO WHERE NAZWA = @Z_MIASTO_KORESP;
    IF @Z_TMP < 1
    BEGIN
        SELECT @Z_TMP = ISNULL(MAX(ID), 0) + 1 FROM MIASTO;
        INSERT INTO MIASTO(ID, NAZWA, KRAJ_ID) VALUES(@Z_TMP, @Z_MIASTO_KORESP, @Z_ADRESS_KORESP_ID);
        SET @Z_ADRESS_KORESP_ID = @Z_TMP;
    END
    ELSE
    BEGIN
        SELECT @Z_ADRESS_KORESP_ID = ID FROM MIASTO WHERE NAZWA = @Z_MIASTO_KORESP;
    END

    -- NOWY ADRES ZAMIESZKANIA
    SELECT @Z_TMP = COUNT(1) FROM KRAJ WHERE NAZWA = @Z_KRAJ_ZAMIESZ;
    IF @Z_TMP < 1
    BEGIN
        SELECT @Z_ADRESS_ZAMIESZ_ID = ISNULL(MAX(ID), 0) + 1 FROM KRAJ;
        INSERT INTO KRAJ(ID, NAZWA) VALUES (@Z_ADRESS_ZAMIESZ_ID, @Z_KRAJ_ZAMIESZ);
    END
    ELSE
    BEGIN
        SELECT @Z_ADRESS_ZAMIESZ_ID = ID FROM KRAJ WHERE NAZWA = @Z_KRAJ_ZAMIESZ;
    END

    SELECT @Z_TMP = COUNT(1) FROM MIASTO WHERE NAZWA = @Z_MIASTO_ZAMIESZ;
    IF @Z_TMP < 1
    BEGIN
        SELECT @Z_TMP = ISNULL(MAX(ID), 0) + 1 FROM MIASTO;
        INSERT INTO MIASTO(ID, NAZWA, KRAJ_ID) VALUES(@Z_TMP, @Z_MIASTO_ZAMIESZ, @Z_ADRESS_ZAMIESZ_ID);
        SET @Z_ADRESS_ZAMIESZ_ID = @Z_TMP;
    END
    ELSE
    BEGIN
        SELECT @Z_ADRESS_ZAMIESZ_ID = ID FROM MIASTO WHERE NAZWA = @Z_MIASTO_ZAMIESZ;
    END

    SELECT @Z_TMP = ISNULL(MAX(ID), 0) + 1 FROM ADRES;
    INSERT INTO ADRES(ID, ULICA, MIASTO_ID, NRDOMU) VALUES (@Z_TMP, @Z_ULICA_KORESP, @Z_ADRESS_ZAMIESZ_ID, @Z_NRDOMU_KORESP);
    SET @Z_ADRESS_ZAMIESZ_ID = @Z_TMP;

    -- OSOBA
    INSERT INTO WLASCICIEL_KONTA(ID, ADRES_KORESPONDENCJI) VALUES (@Z_NEW_ID, @Z_ADRESS_KORESP_ID);

    INSERT INTO OSOBA(WLASCICIEL_KONTA_ID, IMIE, NAZWISKO, NR_DOKUMENTU, NR_TELEFONU, ADRESMAIL, ADRESZAMIESZKANIA_ID)
    VALUES (@Z_NEW_ID, @Z_IMIE, @Z_NAZWISKO, @Z_NR_DOK, @Z_NR_TEL, @Z_EMAIL, @Z_ADRESS_ZAMIESZ_ID);

    -- KONTO
    SELECT @Z_TMP = ISNULL(MAX(ID), 0) + 1 FROM KONTO;
    SELECT @Z_WALUTA_ID = ID FROM WALUTA WHERE NAZWA = @Z_WALUTA;
    SELECT @Z_TYPKONTA_ID = ID FROM TYP_KONTA WHERE NAZWA = @Z_TYPKONTA;

    EXEC CREATE_NR_KONTA_AND_IBAN @Z_NEW_NRKONTA OUTPUT, @Z_NEW_IBAN OUTPUT;

    INSERT INTO KONTO(ID, NRKONTA, WALUTA_ID, IBAN, NAZWARACHUNKU, BALANS, DATA_AKTYWOWANIA, DATA_UTWORZENIA, TYPKONTA_ID)
    VALUES (@Z_TMP, @Z_NEW_NRKONTA, @Z_WALUTA_ID, @Z_NEW_IBAN, @Z_NAZWA_RACHUNKU, 0, GETDATE(), GETDATE(), @Z_TYPKONTA_ID);

    -- WLASCICEL_KONTO
    INSERT INTO WLASCICEL_KONTO(KONTO_ID, WLASCICIEL_KONTA_ID) VALUES (@Z_TMP, @Z_NEW_ID);
END;




 GO
ALTER PROCEDURE CREATE_NR_KONTA_AND_IBAN
    @Z_NEW_NR_KONTA VARCHAR(26) OUTPUT,
    @Z_NEW_IBAN VARCHAR(28) OUTPUT
AS
BEGIN
    DECLARE @Z_NR_KONTA VARCHAR(24);
    DECLARE @Z_CHECKSUM VARCHAR(5);

    --SELECT @Z_NR_KONTA = NR_ROZLICZENIOWY + OSTATNI_ID_KLIENTA + OSTATNI_NR_ID_KLIENTA FROM BANK_GEN;
	SELECT @Z_NR_KONTA =OSTATNI_NR_ID_KLIENTA FROM BANK_GEN;

    SELECT @Z_CHECKSUM = RIGHT('00' + CAST((CAST(@Z_NR_KONTA AS BIGINT) % 97) AS VARCHAR(2)), 2);
	SELECT @Z_NR_KONTA = NR_ROZLICZENIOWY + OSTATNI_ID_KLIENTA + OSTATNI_NR_ID_KLIENTA FROM BANK_GEN;
    SET @Z_NEW_NR_KONTA = @Z_CHECKSUM + @Z_NR_KONTA;

	UPDATE BANK_GEN
	SET OSTATNI_ID_KLIENTA = RIGHT(REPLICATE('0', LEN(OSTATNI_ID_KLIENTA)) + CAST(CAST(OSTATNI_ID_KLIENTA AS INT) + 1 AS VARCHAR), LEN(OSTATNI_ID_KLIENTA));
	UPDATE BANK_GEN
	SET OSTATNI_NR_ID_KLIENTA = RIGHT(REPLICATE('0', LEN(OSTATNI_NR_ID_KLIENTA)) + CAST(CAST(OSTATNI_NR_ID_KLIENTA AS BIGINT) + 1 AS VARCHAR), LEN(OSTATNI_NR_ID_KLIENTA));

    SELECT @Z_NEW_IBAN = KOD_KRAJU + @Z_NEW_NR_KONTA FROM BANK_GEN;
END;





-- PROCEDURA #3
GO
ALTER PROCEDURE PAY_FOR_USING
AS
BEGIN
    DECLARE @Z_ID INT;
    DECLARE @Z_BALANS INT;
    DECLARE @Z_NRKONTA VARCHAR(26);
    DECLARE @Z_OPROCENTOWANIE DECIMAL(3, 2);
    DECLARE @Z_TMP DECIMAL(30, 2);
	DECLARE @INFO VARCHAR(50);

    DECLARE CURS CURSOR FOR
    SELECT KONTO.ID, NRKONTA, BALANS, OPROCENTOWANIE
    FROM KONTO
    JOIN TYP_KONTA ON KONTO.TYPKONTA_ID = TYP_KONTA.ID;

    OPEN CURS;

    FETCH NEXT FROM CURS INTO @Z_ID, @Z_NRKONTA, @Z_BALANS, @Z_OPROCENTOWANIE;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        SET @Z_TMP = @Z_BALANS * (1 - (@Z_OPROCENTOWANIE/100));

        IF (@Z_BALANS < @Z_TMP)
        BEGIN
			SET @INFO = 'NA KONCIE O NUMERZE: ' + @Z_NRKONTA + ' ZA MAŁO ŚRODKÓW ŻEBY ZAPŁACIĆ ZA KORZYSTANIE Z KONTA BANKOWEGO';
            Raiserror(@INFO, 11, 1);
        END;
        ELSE
        BEGIN
            UPDATE KONTO
            SET BALANS = @Z_TMP
            WHERE ID = @Z_ID;
        END;

        FETCH NEXT FROM CURS INTO @Z_ID, @Z_NRKONTA, @Z_BALANS, @Z_OPROCENTOWANIE;
    END;
    CLOSE CURS;
    DEALLOCATE CURS;
END;


-- SPRAWDZANIE DZIAŁANIA PROCEDUR
DECLARE @TMP1 VARCHAR(50), @TMP2 VARCHAR(50)
BEGIN
	
	-- PROCEDURA #1
	SELECT * FROM Konto WHERE ID=5 OR ID=6;
	EXEC PROCED_PRZELEW 5, 6, 1000;

	-- PROCEDURA POMOCNICZA
	--EXEC CREATE_NR_KONTA_AND_IBAN @TMP1 OUTPUT, @TMP2 OUTPUT;
	--SELECT @TMP1 AS TMP1;
	--SELECT @TMP2 AS TMP2;
	--SELECT * FROM BANK_GEN;
	
	-- PROCEDURA #2
	-- SELECT * FROM OSOBA;
	-- SELECT * FROM KONTO;
	--EXEC CREATE_NEW_OSOBA 'GRZYB', 'JASIŃSKI', 'YP927534', '48555666888', 'grzyb@gmail.com', 'POLSKA', 'KRAKOW', 'WIELICKA', 88, 'POLSKA', 'WARSZAWA', 'SREBNA', 3, 'PLN', 'KONTO GRZYBA', 'ZWYKLE';

	-- PROCEDURA #3
	--SELECT * FROM Konto;
	--EXEC PAY_FOR_USING;
END;




-- TRIGGER #1
GO
CREATE TRIGGER OGRANICZENIE_ILOSCI_KONT
ON WLASCICEL_KONTO
FOR INSERT
AS
BEGIN
    DECLARE @ID INT;
	DECLARE @KONTO INT;
    DECLARE CURS CURSOR FOR SELECT WLASCICIEL_KONTA_ID, KONTO_ID FROM INSERTED;

    OPEN CURS;
    FETCH NEXT FROM CURS INTO @ID, @KONTO;
    WHILE @@FETCH_STATUS = 0
    BEGIN
        IF (SELECT COUNT(1) FROM WLASCICEL_KONTO WHERE WLASCICIEL_KONTA_ID = @ID) > 5
        BEGIN
            Raiserror('NIE MOŻNA MIEĆ WIĘCEJ NIŻ 5 KONT', 16, 1);
            DELETE FROM WLASCICEL_KONTO WHERE WLASCICIEL_KONTA_ID = @ID AND KONTO_ID = @KONTO;
        END;
        FETCH NEXT FROM CURS INTO @ID;
    END;
    CLOSE CURS;
    DEALLOCATE CURS;
END;






-- TRIGGER #2
GO
CREATE TRIGGER UBEZPIECZENIE_DLA_MLODYCH
ON UBEZPIECZENIE
FOR INSERT, UPDATE
AS
BEGIN
    DECLARE @Z_TYP_KONTA VARCHAR(50);
    DECLARE @KWOTA DECIMAL(18, 2);

    SELECT @Z_TYP_KONTA = TYP_KONTA.NAZWA, @KWOTA = i.KWOTA FROM KONTO k JOIN TYP_KONTA ON k.TYPKONTA_ID = TYP_KONTA.ID JOIN INSERTED i ON k.ID = i.KONTO_ID;

    IF (@Z_TYP_KONTA = 'KONTO DLA MLODYCH' AND @KWOTA > 50000)
    BEGIN
        IF EXISTS (SELECT 1 FROM INSERTED)
        BEGIN
            Raiserror('NIE MOŻNA DODAĆ UBEZPIECZENIE NA WIĘCEJ NIŻ 50000 DLA KONTA DLA MŁODYCH', 16, 1);
			ROLLBACK;
        END

        IF EXISTS (SELECT 1 FROM DELETED)
        BEGIN
            UPDATE u SET u.KWOTA = d.KWOTA FROM UBEZPIECZENIE u JOIN DELETED d ON u.ID = d.ID;
        END
    END
END;


-- SPRAWDZANIE DZIAŁANIA TRIGGERÓW
SELECT * FROM Wlascicel_Konto;
SELECT * FROM Konto;
SELECT * FROM Ubezpieczenie;

-- TRIGGER #1
--INSERT INTO Konto(ID, NrKonta, Waluta_ID, IBAN, NazwaRachunku, Balans, Data_Aktywowania, Data_Utworzenia, TypKonta_ID)
--VALUES (20, '77055509780000078954796652', 1, 'PL77055509780000078954796652', 'FERRARI 6', 0, '2024-12-01', '2024-12-01', 2);
--INSERT INTO Wlascicel_Konto(Wlasciciel_Konta_ID, Konto_ID) VALUES (18, 20);

-- TRIGGER #2
--INSERT INTO Ubezpieczenie(ID, Konto_ID, Ubezpieczenie_ID, Kwota, DataStart, DataKoniec)
--VALUES (7, 5, 1, 50001, '2025-01-23', '2026-01-24');